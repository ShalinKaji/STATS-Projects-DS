1+1
install.packages("KernSmooth")
library(kernSmooth)
library(KernSmooth)
install.packages("devtools")
library(devtools)
library(boot)
# Given: Investigation focuses on Confidence lvl (1-alpha) = 0.95
n <- c(5,10,30,100)
lambda <- c(0.01,0.1,1,10)
lower.z = numeric(0)
upper.z = numeric(0)
lower.boot = numeric(0)
upper.boot= numeric(0)
mean.boot<-function(rec,sub){
return(mean(rec[sub]))
}
data_info = matrix(,nrow = 1,ncol = 4,dimnames = list(c(1),c("lamda","n","z_coverage","boot_coverage")))
data_info = data_info[-c(1),]
for(param in lambda){
conf_lvl_LLN = numeric(0)
conf_lvl_BootPerCI = numeric(0)
k=1
for(datasize in n){
for (i in 1:5000){
# Generating data following Exponential Distribution.
data_sim <- rexp(datasize, param)
# Calculating the Confidence Interval using Large Sample Mean formula.
lower.z <- mean(data_sim) - (qnorm(.975)*sd(data_sim)/sqrt(datasize))
upper.z <- mean(data_sim) + (qnorm(.975)*sd(data_sim)/sqrt(datasize))
# Calculating Parametric Bootstrap Percentile CI.
BootR <- boot(data=data_sim, statistic = mean.boot, R= 999)
lower.boot <- quantile(BootR$t,.025)
upper.boot <- quantile(BootR$t,.975)
z_coverage[i] <- ((1/param) >= lower.z) & ((1/param) <= upper.z)
boot_coverage[i] <- ((1/param) >= lower.boot) & ((1/param) <= upper.boot)
}
conf_lvl_LLN[k] <- mean(z_coverage)
conf_lvl_BootPerCI[k] <- mean(boot_coverage)
data_info = rbind(data_info,c(param,datasize,conf_lvl_LLN[k],conf_lvl_BootPerCI[k]))
k=k+1
}
plot(n,conf_lvl_LLN,type = 'l', col="red",lwd=2, ylab="")
title(main = paste("Plotting graph of Coverage Probability vs N for lambda = ",param), ylab = 'Coverage Probability')
lines(n,conf_lvl_BootPerCI,type = 'l', col="blue",lwd=2)
legend("bottomright", legend = c('LS-CI','Boot-CI'), fill = c('red','blue'))
}
data_info
library(boot)
# Given: Investigation focuses on Confidence lvl (1-alpha) = 0.95
n <- c(5,10,30,100)
lambda <- c(0.01,0.1,1,10)
lower.z = numeric(0)
upper.z = numeric(0)
lower.boot = numeric(0)
upper.boot= numeric(0)
z_coverage = numeric(0)
mean.boot<-function(rec,sub){
return(mean(rec[sub]))
}
data_info = matrix(,nrow = 1,ncol = 4,dimnames = list(c(1),c("lamda","n","z_coverage","boot_coverage")))
data_info = data_info[-c(1),]
for(param in lambda){
conf_lvl_LLN = numeric(0)
conf_lvl_BootPerCI = numeric(0)
k=1
for(datasize in n){
for (i in 1:5000){
# Generating data following Exponential Distribution.
data_sim <- rexp(datasize, param)
# Calculating the Confidence Interval using Large Sample Mean formula.
lower.z <- mean(data_sim) - (qnorm(.975)*sd(data_sim)/sqrt(datasize))
upper.z <- mean(data_sim) + (qnorm(.975)*sd(data_sim)/sqrt(datasize))
# Calculating Parametric Bootstrap Percentile CI.
BootR <- boot(data=data_sim, statistic = mean.boot, R= 999)
lower.boot <- quantile(BootR$t,.025)
upper.boot <- quantile(BootR$t,.975)
z_coverage[i] <- ((1/param) >= lower.z) & ((1/param) <= upper.z)
boot_coverage[i] <- ((1/param) >= lower.boot) & ((1/param) <= upper.boot)
}
conf_lvl_LLN[k] <- mean(z_coverage)
conf_lvl_BootPerCI[k] <- mean(boot_coverage)
data_info = rbind(data_info,c(param,datasize,conf_lvl_LLN[k],conf_lvl_BootPerCI[k]))
k=k+1
}
plot(n,conf_lvl_LLN,type = 'l', col="red",lwd=2, ylab="")
title(main = paste("Plotting graph of Coverage Probability vs N for lambda = ",param), ylab = 'Coverage Probability')
lines(n,conf_lvl_BootPerCI,type = 'l', col="blue",lwd=2)
legend("bottomright", legend = c('LS-CI','Boot-CI'), fill = c('red','blue'))
}
data_info
library(boot)
# Given: Investigation focuses on Confidence lvl (1-alpha) = 0.95
n <- c(5,10,30,100)
lambda <- c(0.01,0.1,1,10)
lower.z = numeric(0)
upper.z = numeric(0)
lower.boot = numeric(0)
upper.boot= numeric(0)
z_coverage = numeric(0)
boot_coverage = numeric(0)
mean.boot<-function(rec,sub){
return(mean(rec[sub]))
}
data_info = matrix(,nrow = 1,ncol = 4,dimnames = list(c(1),c("lamda","n","z_coverage","boot_coverage")))
data_info = data_info[-c(1),]
for(param in lambda){
conf_lvl_LLN = numeric(0)
conf_lvl_BootPerCI = numeric(0)
k=1
for(datasize in n){
for (i in 1:5000){
# Generating data following Exponential Distribution.
data_sim <- rexp(datasize, param)
# Calculating the Confidence Interval using Large Sample Mean formula.
lower.z <- mean(data_sim) - (qnorm(.975)*sd(data_sim)/sqrt(datasize))
upper.z <- mean(data_sim) + (qnorm(.975)*sd(data_sim)/sqrt(datasize))
# Calculating Parametric Bootstrap Percentile CI.
BootR <- boot(data=data_sim, statistic = mean.boot, R= 999)
lower.boot <- quantile(BootR$t,.025)
upper.boot <- quantile(BootR$t,.975)
z_coverage[i] <- ((1/param) >= lower.z) & ((1/param) <= upper.z)
boot_coverage[i] <- ((1/param) >= lower.boot) & ((1/param) <= upper.boot)
}
conf_lvl_LLN[k] <- mean(z_coverage)
conf_lvl_BootPerCI[k] <- mean(boot_coverage)
data_info = rbind(data_info,c(param,datasize,conf_lvl_LLN[k],conf_lvl_BootPerCI[k]))
k=k+1
}
plot(n,conf_lvl_LLN,type = 'l', col="red",lwd=2, ylab="")
title(main = paste("Plotting graph of Coverage Probability vs N for lambda = ",param), ylab = 'Coverage Probability')
lines(n,conf_lvl_BootPerCI,type = 'l', col="blue",lwd=2)
legend("bottomright", legend = c('LS-CI','Boot-CI'), fill = c('red','blue'))
}
data_info
# STATS-Mini-Project-6
# Setting working directory to Proj-6 folder.
setwd("C:/Users/Shalin Kaji/Desktop/UT-Dallas-Spr23/STATS-DS-Min.Chen/Mini-Proj-6")
getwd()
library(BSDA)
# Exploring our .csv file
data <- read.csv("prostate_cancer.csv")
data
plot(data)
str(data)
# STATS-Mini-Project-6
# Setting working directory to Proj-6 folder.
setwd("C:/Users/Shalin Kaji/Desktop/UT-Dallas-Spr23/STATS-DS-Min.Chen/Mini-Proj-6")
getwd()
library(BSDA)
# Exploring our .csv file
data <- read.csv("prostate_cancer.csv")
data
model <- lm((psa~(cancervol+weight+age+benpros+vesinv+capspen+gleason)), data = data)
summary(model)
model <- lm((psa~(cancervol+weight+age+benpros+age*benpros+vesinv+capspen+gleason)), data = data)
summary(model)
model <- lm((psa~(cancervol+age+capspen+gleason)), data = data)
summary(model)
us_targ_var <- data$psa
us_predict_var <- data[,-c('subject','psa')]
us_targ_var <- data$psa
us_predict_var <- data[,-c(1,2)]
head(us_targ_var)
head(us_predict_var)
str(us_predict_var)
4
us_targ_var <- data$psa
us_predict_var <- data[,-c(1,2,7)]
scaled_tarvar <- scale(us_targ_var)
scaled_predctors <- scale(us_predict_var)
head(scaled_tarvar)
head(scaled_predctors)
scaled_inp <- cbind(scaled_predctors, data$vesinv)
head(scaled_inp)
scaled_inp <- cbind(scaled_predctors, vesinv = data$vesinv)
head(scaled_inp)
data$vesinv<-as.factor(data$vesinv)
us_targ_var <- data$psa
us_predict_var <- data[,-c(1,2,7)]
scaled_tarvar <- scale(us_targ_var)
scaled_predctors <- scale(us_predict_var)
scaled_inp <- cbind(scaled_predctors, vesinv = data$vesinv)
model <- lm(scaled_tarvar ~ scaled_inp)
summary(model)
plot(data)
str(data)
model1<-lm(psa ~ cancervol,data= data)
summary(model1)
model1<-lm(psa ~ cancervol+vesinv,data= data)
summary(model1)
plot(x=scaled_inp,y=scaled_tarvar)
plot(scaled_inp,scaled_tarvar)
scaled_tarvar_dumm<-cbind(scaled_tarvar,scaled_inp)
plot(scaled_tarvar_dumm)
head(scaled_tarvar_dumm)
scaled_tarvar_dumm<-cbind(psa=scaled_tarvar,scaled_inp)
plot(scaled_tarvar_dumm)
plot(scaled_tarvar_dumm)
str(scaled_tarvar_dumm)
scaled_tarvar_dumm<-as.data.frame(scaled_tarvar_dumm)
plot(scaled_tarvar_dumm)
scaled_tarvar_dumm
model1<-lm(ln(psa) ~ cancervol+vesinv,data= data)
model1<-lm(log(psa) ~ cancervol+vesinv,data= data)
summary(model1)
model1<-lm(log(psa) ~ cancervol+vesinv+gleason,data= data)
summary(model1)
model1<-lm(log(psa) ~ cancervol+vesinv+gleason+age,data= data)
summary(model1)
model1<-lm(log(psa) ~ cancervol+vesinv+gleason+benpros+,data= data)
model1<-lm(log(psa) ~ cancervol+vesinv+gleason+benpros+weight,data= data)
summary(model1)
model1<-lm(log(psa) ~ cancervol^2+vesinv+gleason+benpros+weight,data= data)
summary(model1)
model1<-lm(psa ~ cancervol+vesinv+gleason+benpros+weight,data= data)
summary(model1)
model1<-lm(log(psa) ~ cancervol^2+vesinv+gleason+benpros*age+weight,data= data)
summary(model1)
model1<-lm(log(psa) ~ cancervol^2+vesinv+gleason+age+weight,data= data)
summary(model1)
model1<-lm(log(psa) ~ cancervol^2+vesinv+gleason+benpros+weight,data= data)
summary(model1)
model1<-lm(log(psa) ~ cancervol^2+vesinv+gleason+benpros,data= data)
summary(model1)
model1<-lm(log(psa) ~ cancervol^2+vesinv+gleason+benpros+log(weight),data= data)
summary(model1)
model1<-lm(log(psa) ~ cancervol^2+vesinv+gleason+benpros+weight,data= data)
summary(model1)
model1<-lm(log(psa) ~ log(cancervol)+vesinv+gleason+benpros+weight,data= data)
summary(model1)
model1<-lm(log(psa) ~ log(cancervol)+vesinv+gleason+log(benpros)+weight,data= data)
model1<-lm(log(psa) ~ log(cancervol)+vesinv+gleason+benpros+log(weight),data= data)
summary(model1)
model1<-lm(log(psa) ~ log(cancervol)+vesinv+gleason+benpros*log(weight),data= data)
summary(model1)
model1<-lm(log(psa) ~ log(cancervol)+vesinv+gleason+benpros*log(weight)+log(age),data= data)
summary(model1)
plot(fitted(model1),resid(model1))
abline(h=0)
qqnorm(resid(model1))
qqline(resid(model1))
cor(data$psa,data$cancervol)
cor(log(data$psa),log(data$cancervol))
# final regression function G(xi)
model1<-lm(log(psa) ~ log(cancervol)+vesinv+gleason+benpros*log(weight)+log(age),data= data)
summary(model1)
test_data <- c(mean(log(data$cancervol)),0,mean(data$gleason),mean(data$benpros),mean(log(age)),mean(log(data$age)))
model1.predict(test_data)
# final regression function G(xi)
model1<-lm(log(psa) ~ log(cancervol)+vesinv+gleason+benpros*log(weight)+log(age),data= data)
summary(model1)
test_data <- c(mean(log(data$cancervol)),0,mean(data$gleason),mean(data$benpros),mean(log(data$age)),mean(log(data$age)))
res <- predict(model1, test_data)
# final regression function G(xi)
model1<-lm(log(psa) ~ log(cancervol)+vesinv+gleason+benpros*log(weight)+log(age),data= data)
summary(model1)
test_data <- data.frame(mean(log(data$cancervol)),0,mean(data$gleason),mean(data$benpros),mean(log(data$age)),mean(log(data$age)))
res <- predict(model1, test_data)
model1$call
cor(data$psa,data$weight)
cor(log(data$psa),log(data$weight))
